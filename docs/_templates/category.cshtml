@model Nest.SiteData
<!doctype html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang=""> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8" lang=""> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9" lang=""> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="">
<!--<![endif]-->
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>brian dunnington - @Model.CurrentItem.Title</title>
    <meta name="title" content="@Model.CurrentItem.Title">
    <meta name="description" content="@Model.CurrentItem.Summary">
    <meta property="og:type" content="article">
    <meta property="og:url" content="@("https://briandunnington.com" + @Model.CurrentItem.LinkNoExt)">
    <meta property="og:title" content="@Model.CurrentItem.Title">
    <meta property="og:description" content="@Model.CurrentItem.Summary">
    <meta property="og:image" content="@("https://briandunnington.com" + (@Model.CurrentItem.Contains("MainImage") && !String.IsNullOrEmpty(@Model.CurrentItem.MainImage) ? @Model.CurrentItem.MainImage : "/img/bd_bikesunrise.jpg"))">
    <meta property="twitter:site" content="@("@briandunnington")">
    <meta property="twitter:creator" content="@("@briandunnington")">
    <meta property="twitter:card" content="summary_large_image">
    <meta property="twitter:url" content="@("https://briandunnington.com" + @Model.CurrentItem.LinkNoExt)">
    <meta property="twitter:title" content="@Model.CurrentItem.Title">
    <meta property="twitter:description" content="@Model.CurrentItem.Summary">
    <meta property="twitter:image" content="@("https://briandunnington.com" + (@Model.CurrentItem.Contains("MainImage") && !String.IsNullOrEmpty(@Model.CurrentItem.MainImage) ? @Model.CurrentItem.MainImage : "/img/bd_bikesunrise.jpg"))">

    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/css/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/css/font-opensans.css">
    <link rel="stylesheet" href="/css/main.css">

    <script src="/js/vendor/modernizr-2.8.3-respond-1.4.2.min.js"></script>
</head>
<body>
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/"><img src="/img/bd_logo.png"> : brian dunnington</a>
            </div>
            <div id="navbar" class="navbar-collapse collapse">
            </div>
        </div>
    </nav>

    <div class="mainimage">
        <img class="img-responsive" src="@(@Model.CurrentItem.Contains("MainImage") && !String.IsNullOrEmpty(@Model.CurrentItem.MainImage) ? @Model.CurrentItem.MainImage : "/img/bd_bikesunrise.jpg")" />
    </div>

    <div class="container">
        <div class="row">
            <div class="col-sm-9">
                <h4>Category: @Model.CurrentItem.Title</h4>
                <h5>@Model.CurrentItem.Summary</h5>
                <div class="row">
                    @{
                        var posts = new List<dynamic>();
                        foreach (var post in @Model.Posts.OrderByDescending(p => p.Date))
                        {
                            if (post.Contains("Category") && post.Category.Replace(" ", "").ToLower() == @Model.CurrentItem.OriginalFileName.ToLower())
                            {
                                posts.Add(post);
                            }
                        }
                    }
                    @foreach (var post in posts)
                    {
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 postlist">
                            <h6 class="muted">@post.Date.ToString("yyyy.MM.dd")</h6>
                            <p><a href="@post.LinkNoExt" class="thumbnail"><img src="@(post.Contains("Thumbnail") && !String.IsNullOrEmpty(post.Thumbnail) ? post.Thumbnail : "/img/spacer.png")" /></a></p>
                            <h4>@post.Title</h4>
                            <p>@post.Summary</p>
                            <p><a class="btn btn-default" href="@post.LinkNoExt" role="button">Read more &raquo;</a></p>
                            <hr class="visible-xs" />
                        </div>
                    }
                </div>
            </div>
            <div class="col-sm-3 categories">
                <h6 class="muted">&nbsp;</h6>
                <h4 id="twitter"><a href="http://twitter.com/briandunnington"><img src="/img/twitter.png" width="64" /></a> <a href="http://twitter.com/briandunnington">@@briandunnington</a></h4>
                <hr />
                <h6 class="muted">CATEGORIES</h6>
                @{
                    var categories = @Model.Pages.Where((p) => p.LinkNoExt.Contains("/category/")).OrderByDescending((p) => p.OriginalFileName);
                }
                @foreach (var category in categories)
                {
                    {
                        if (category.Contains("Thumbnail"))
                        {
                            <p><a href="@category.LinkNoExt" class="thumbnail"><img src="@category.Thumbnail" /></a></p>
                        }
                    }
                    <h4 class="categoryTitle"><a href="@category.LinkNoExt">@category.Title</a></h4>
                    <hr />
                }
                <hr />
                <h6 class="muted">TAGS</h6>
                @{
                    var taglist = new Dictionary<string, List<dynamic>>();
                    foreach (var post in @Model.Posts)
                    {
                        if (post.Contains("Tags"))
                        {
                            var tags = ((string)post.Tags).Split(",".ToCharArray(), StringSplitOptions.RemoveEmptyEntries).Select((t) =>
                            {
                                return t.Trim();
                            });
                            foreach (var tag in tags)
                            {
                                if (!taglist.ContainsKey(tag))
                                {
                                    taglist.Add(tag, new List<dynamic>());
                                }
                                var list = taglist[tag];
                                list.Add(post);
                            }
                        }
                    }
                }
                @foreach (var item in taglist.OrderBy((tag) => tag.Key))
                {
                    <h6>@item.Key</h6>
                }
            </div>
        </div>

        <hr>

        <footer>
            <p>&copy; brian dunnington 2004-2019 &nbsp;&nbsp;&nbsp;&middot;&nbsp;&nbsp;&nbsp; <a href="/about">About</a></p>
        </footer>
    </div>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="/js/vendor/jquery-1.11.2.min.js"><\/script>')</script>
    <script src="/js/vendor/bootstrap.min.js"></script>
    <script src="/js/main.js"></script>
</body>
</html>
